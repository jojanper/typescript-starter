/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
const fs = require('fs');
const path = require('path');

const ENCODING = { encoding: 'utf8' };

if (process.argv.length < 4) {
    console.log(`Usage: node ${__filename} <dist-folder> <ref-html> <template-html>`);
    process.exit(1);
}

/**
 * Look for specified script attribute values from source HTML.
 *
 * @param {*} attribute Attribute name.
 * @param {*} source HTML containing <script> elements.
 */
function getAttributeValue(attribute, source) {
    const vals = [];
    const regex = RegExp(`<script?\\w+(?:\\s+(?:${attribute}=\"([^\"]*)\")|[^\\s>]+|\\s+)*>`, 'gi');

    let matches;
    while (matches = regex.exec(source)) {
        vals.push(matches[1].split('.')[0]);
    }

    return vals;
}

// Locate modern and legacy files from the target folder
const files = fs.readdirSync(path.normalize(process.argv[2]), ENCODING);
const modernFiles = files.filter(name => /\.mjs$/.test(name));
const legacyFiles = files.filter(name => /\.js$/.test(name));

// Load input HTML template
const templateHtml = fs.readFileSync(path.normalize(process.argv[4]), ENCODING);

// Load webpack generated HTML file and determine 'src'-attributes from each script element
const inputHtml = fs.readFileSync(path.normalize(process.argv[3]), ENCODING);
const srcs = getAttributeValue('src', inputHtml);

// Build modern script elements using source file order as generated by the webpack build
const modernScripts = srcs.map(prefix => {
    const data = modernFiles.filter(item => item.startsWith(prefix));
    return `<script type="module" src="${data[0]}"></script>`;
}).join('');

// Build legacy script elements using source file order as generated by the webpack build
const legacyScripts = srcs.map(prefix => {
    const data = legacyFiles.filter(item => item.startsWith(prefix));
    return `<script defer nomodule src="${data[0]}"></script>`;
}).join('');

// Create the HTML template which contains both modern and legacy script elements
const htmlFinal = templateHtml.replace('{ script-template }', modernScripts + legacyScripts);
fs.writeFileSync(path.normalize(process.argv[3]), htmlFinal);
